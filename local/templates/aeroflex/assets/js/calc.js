var AeroflexCalc = {
  init(settings = {}) {
    Object.assign(this.settings, this.default, settings);
  },

  constants: {
    DIFF: 3.6,
  },

  default: {
    region_coefficient: 1.0,
    material_conductivity: undefined,
    material_conductivity_delta: undefined,
    heat_coefficient: undefined,
    additional_loss: 1.0,
    density: undefined
  },

  settings: {},

  densityD: [15, 20, 25, 40, 50, 65, 80, 100, 125, 150, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000, 1400, Infinity],
  densityT: [20, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600],

  resistanceD: [32, 40, 50, 100, 125, 150, 200, 250, 300, 350, 400, 500, 600, 700, 800, 900, 1000, 2000],
  resistanceT: [100, 300, 500],

  thermalResistance: [
    [// outdoor
      [// low emission
        [0.12, 0.09, 0.07],
        [0.10, 0.07, 0.05],
        [0.09, 0.06, 0.04],
        [0.07, 0.05, 0.04],
        [0.05, 0.04, 0.03],
        [0.05, 0.04, 0.03],
        [0.04, 0.03, 0.03],
        [0.03, 0.03, 0.02],
        [0.03, 0.02, 0.02],
        [0.03, 0.02, 0.02],
        [0.02, 0.02, 0.02],
        [0.02, 0.02, 0.016],
        [0.017, 0.015, 0.014],
        [0.015, 0.013, 0.012],
        [0.013, 0.012, 0.011],
        [0.012, 0.011, 0.010],
        [0.011, 0.010, 0.009],
        [0.006, 0.006, 0.005],
      ],
      [// high emission
        [0.12, 0.09, 0.07],
        [0.10, 0.07, 0.05],
        [0.09, 0.06, 0.04],
        [0.07, 0.05, 0.04],
        [0.05, 0.04, 0.03],
        [0.05, 0.04, 0.03],
        [0.04, 0.03, 0.03],
        [0.03, 0.03, 0.02],
        [0.03, 0.02, 0.02],
        [0.03, 0.02, 0.02],
        [0.02, 0.02, 0.02],
        [0.02, 0.02, 0.016],
        [0.017, 0.015, 0.014],
        [0.015, 0.013, 0.012],
        [0.013, 0.012, 0.011],
        [0.012, 0.011, 0.010],
        [0.011, 0.010, 0.009],
        [0.006, 0.006, 0.005],
      ]
    ],
    [// indoor
      [// low emission
        [0.50, 0.35, 0.30],
        [0.45, 0.30, 0.25],
        [0.40, 0.25, 0.20],
        [0.25, 0.19, 0.15],
        [0.21, 0.17, 0.13],
        [0.18, 0.15, 0.11],
        [0.16, 0.13, 0.10],
        [0.13, 0.10, 0.09],
        [0.11, 0.09, 0.08],
        [0.10, 0.08, 0.07],
        [0.09, 0.07, 0.06],
        [0.075, 0.065, 0.060],
        [0.062, 0.055, 0.050],
        [0.055, 0.051, 0.045],
        [0.048, 0.045, 0.042],
        [0.044, 0.041, 0.038],
        [0.040, 0.037, 0.034],
        [0.022, 0.020, 0.017],
      ],
      [// high emission
        [0.33, 0.22, 0.17],
        [0.29, 0.20, 0.15],
        [0.25, 0.17, 0.13],
        [0.15, 0.11, 0.10],
        [0.13, 0.10, 0.09],
        [0.12, 0.09, 0.08],
        [0.10, 0.08, 0.07],
        [0.09, 0.07, 0.06],
        [0.08, 0.07, 0.06],
        [0.07, 0.06, 0.05],
        [0.06, 0.05, 0.04],
        [0.050, 0.045, 0.040],
        [0.043, 0.038, 0.035],
        [0.038, 0.035, 0.032],
        [0.034, 0.031, 0.029],
        [0.031, 0.028, 0.026],
        [0.028, 0.026, 0.024],
        [0.015, 0.014, 0.013],
      ]
    ]
  ],

  conductivity: [
    [0.0354, 0.00011], //EPDM
    [0.0337, 0.00010], // EPDM HT
    [0.0320, 0.00010]  // FIRO

    // [0.044, 0.00011], // EPDM
    // [0.0415, 0.00010], // EPDM HT
    // [0.0398, 0.00010]  // FIRO
  ],

  lossFactor: [
    [1.00, 1.00, 1.00, 1.00], // Europe
    [0.98, 0.98, 0.95, 0.94], // Ural
    [0.98, 0.98, 0.95, 0.94], // West Siberia
    [0.98, 0.98, 0.95, 0.94], // East Siberia
    [0.96, 0.96, 0.92, 0.90], // Far East
    [0.96, 0.96, 0.92, 0.90]  // Far North
  ],

  densityRate: [
    [// outdoor
      [// less or equal 5000
        [4, 10, 18, 28, 38, 49, 61, 74, 87, 102, 117, 133, 150],
        [5, 11, 21, 31, 42, 54, 67, 81, 96, 112, 128, 146, 164],
        [5, 12, 23, 34, 46, 59, 73, 88, 104, 120, 138, 157, 176],
        [6, 14, 26, 39, 52, 67, 82, 99, 116, 135, 154, 174, 196],
        [7, 16, 29, 43, 57, 73, 90, 107, 126, 146, 167, 189, 212],
        [8, 18, 33, 48, 65, 82, 100, 120, 141, 162, 185, 209, 234],
        [9, 20, 36, 52, 69, 88, 107, 128, 150, 172, 197, 222, 248],
        [10, 22, 39, 57, 76, 96, 116, 139, 162, 187, 212, 239, 267],
        [12, 25, 44, 63, 84, 113, 137, 162, 189, 216, 245, 276, 307],
        [13, 27, 48, 70, 92, 123, 149, 176, 205, 235, 266, 298, 332],
        [16, 34, 56, 83, 109, 146, 176, 207, 240, 274, 310, 347, 385],
        [19, 39, 67, 95, 124, 166, 199, 234, 270, 307, 346, 387, 429],
        [22, 44, 76, 106, 138, 184, 220, 258, 297, 338, 380, 424, 469],
        [27, 54, 92, 128, 164, 202, 241, 282, 324, 368, 413, 460, 508],
        [30, 60, 100, 139, 178, 219, 260, 304, 349, 395, 443, 493, 544],
        [33, 65, 109, 150, 192, 235, 280, 326, 373, 422, 473, 526, 580],
        [36, 71, 118, 162, 207, 253, 300, 349, 399, 451, 505, 561, 618],
        [42, 82, 135, 185, 235, 285, 338, 391, 447, 504, 563, 624, 686],
        [47, 91, 150, 204, 259, 314, 371, 429, 489, 551, 614, 679, 746],
        [53, 102, 166, 226, 286, 346, 407, 470, 535, 602, 670, 740, 812],
        [59, 112, 183, 248, 312, 377, 443, 511, 581, 652, 725, 800, 877],
        [64, 123, 199, 269, 339, 408, 479, 552, 626, 702, 780, 860, 941],
        [87, 165, 264, 355, 444, 532, 621, 712, 804, 898, 995, 1092, 1193],
        [19, 35, 54, 70, 85, 99, 112, 125, 141, 158, 174, 191, 205],
      ],
      [// greater 5000
        [4, 9, 17, 25, 35, 45, 56, 68, 81, 94, 109, 124, 140],
        [4, 10, 19, 28, 39, 50, 62, 75, 89, 103, 119, 135, 152],
        [5, 11, 20, 31, 42, 54, 67, 81, 95, 111, 128, 145, 163],
        [5, 12, 23, 35, 47, 60, 75, 90, 106, 123, 142, 161, 181],
        [6, 14, 26, 38, 51, 66, 81, 98, 115, 133, 153, 173, 195],
        [7, 16, 29, 43, 58, 74, 90, 108, 127, 147, 169, 191, 214],
        [8, 17, 31, 46, 62, 78, 96, 115, 135, 156, 179, 202, 226],
        [9, 19, 34, 50, 67, 85, 104, 124, 146, 168, 192, 217, 243],
        [10, 21, 38, 55, 74, 93, 114, 136, 159, 183, 208, 235, 263],
        [11, 23, 42, 61, 80, 101, 132, 156, 182, 209, 238, 267, 298],
        [14, 28, 50, 72, 95, 119, 154, 182, 212, 242, 274, 308, 343],
        [16, 33, 57, 82, 107, 133, 173, 204, 236, 270, 305, 342, 380],
        [18, 37, 64, 91, 118, 147, 191, 224, 259, 296, 333, 373, 414],
        [22, 45, 77, 108, 140, 173, 208, 244, 281, 320, 361, 403, 446],
        [25, 49, 84, 117, 152, 187, 223, 262, 301, 343, 385, 430, 476],
        [27, 54, 91, 127, 163, 200, 239, 280, 322, 365, 410, 457, 505],
        [30, 58, 98, 136, 175, 215, 256, 299, 343, 389, 436, 486, 537],
        [34, 67, 112, 154, 197, 241, 286, 333, 382, 432, 484, 537, 593],
        [38, 75, 124, 170, 217, 264, 313, 364, 416, 470, 526, 583, 642],
        [43, 83, 137, 188, 238, 290, 343, 397, 453, 511, 571, 633, 696],
        [47, 91, 150, 205, 259, 315, 372, 430, 490, 552, 616, 681, 749],
        [52, 100, 163, 222, 281, 340, 400, 463, 527, 592, 660, 729, 801],
        [70, 133, 215, 291, 364, 439, 514, 591, 670, 750, 833, 918, 1098],
        [15, 27, 41, 54, 66, 77, 89, 100, 110, 134, 153, 174, 192],
      ]
    ],
    [// indoor
      [// less or equal 5000
        [6, 6, 16, 25, 35, 46, 58, 71, 85, 99, 114, 130, 147],
        [7, 7, 18, 28, 40, 52, 65, 79, 93, 109, 126, 143, 161],
        [8, 8, 20, 31, 43, 56, 70, 85, 101, 118, 136, 154, 174],
        [10, 10, 23, 36, 49, 64, 80, 96, 114, 132, 152, 172, 194],
        [11, 11, 25, 40, 54, 70, 87, 105, 124, 144, 165, 187, 210],
        [13, 13, 29, 45, 62, 79, 98, 118, 139, 161, 184, 208, 233],
        [14, 14, 32, 49, 66, 85, 105, 126, 148, 171, 195, 221, 247],
        [16, 16, 35, 54, 73, 93, 115, 137, 161, 186, 212, 239, 267],
        [18, 18, 39, 60, 81, 103, 126, 151, 176, 203, 231, 261, 291],
        [21, 21, 44, 66, 89, 113, 138, 164, 192, 221, 251, 282, 315],
        [26, 26, 53, 80, 107, 134, 163, 194, 225, 258, 292, 328, 365],
        [30, 30, 62, 92, 122, 153, 185, 218, 253, 290, 327, 366, 407],
        [34, 34, 70, 103, 136, 170, 205, 241, 279, 319, 359, 402, 446],
        [38, 38, 77, 113, 149, 186, 224, 263, 304, 347, 391, 436, 483],
        [42, 42, 85, 123, 162, 201, 242, 284, 328, 373, 419, 467, 517],
        [46, 46, 92, 134, 175, 217, 260, 305, 351, 398, 448, 498, 551],
        [51, 51, 100, 144, 189, 233, 279, 327, 375, 426, 478, 532, 587],
        [58, 58, 114, 164, 214, 263, 314, 367, 420, 476, 533, 592, 652],
        [65, 65, 127, 182, 236, 290, 345, 402, 460, 520, 582, 645, 710],
        [73, 73, 141, 202, 261, 320, 379, 441, 504, 568, 635, 703, 772],
        [81, 81, 156, 221, 285, 349, 413, 479, 547, 616, 687, 760, 834],
        [89, 89, 170, 241, 309, 378, 447, 518, 590, 663, 739, 816, 896],
        [120, 120, 226, 318, 406, 492, 580, 668, 758, 850, 943, 1038, 1136],
        [26, 26, 46, 63, 78, 92, 105, 119, 132, 145, 158, 171, 190],
      ],
      [// greater 5000
        [6, 6, 14, 23, 33, 43, 54, 66, 79, 93, 107, 122, 138],
        [7, 7, 16, 26, 37, 48, 60, 73, 87, 102, 117, 134, 151],
        [8, 8, 18, 28, 40, 52, 65, 79, 94, 110, 126, 144, 162],
        [9, 9, 21, 32, 45, 59, 73, 89, 105, 122, 141, 160, 180],
        [10, 10, 23, 36, 50, 64, 80, 96, 114, 133, 152, 173, 194],
        [12, 12, 26, 41, 56, 72, 89, 107, 127, 147, 169, 191, 214],
        [13, 13, 28, 44, 60, 77, 95, 114, 135, 156, 179, 202, 227],
        [14, 14, 31, 48, 65, 84, 103, 124, 146, 169, 193, 218, 244],
        [16, 16, 35, 53, 72, 92, 113, 136, 159, 184, 210, 237, 265],
        [18, 18, 38, 58, 79, 100, 123, 147, 172, 199, 226, 255, 285],
        [22, 22, 46, 70, 93, 118, 144, 172, 200, 230, 262, 294, 328],
        [26, 26, 53, 79, 106, 134, 162, 193, 224, 257, 291, 327, 364],
        [29, 29, 60, 88, 118, 148, 179, 212, 246, 281, 318, 357, 396],
        [33, 33, 66, 97, 129, 161, 195, 230, 267, 305, 344, 385, 428],
        [36, 36, 72, 106, 139, 174, 210, 247, 286, 326, 368, 411, 456],
        [39, 39, 78, 114, 150, 187, 225, 264, 305, 348, 392, 437, 484],
        [43, 43, 84, 123, 161, 200, 241, 282, 326, 370, 417, 465, 514],
        [49, 49, 96, 139, 181, 225, 269, 315, 363, 412, 462, 515, 569],
        [55, 55, 107, 153, 200, 247, 295, 344, 395, 448, 502, 558, 616],
        [61, 61, 118, 169, 220, 270, 322, 376, 431, 487, 546, 606, 668],
        [67, 67, 130, 185, 239, 294, 350, 407, 466, 527, 589, 653, 718],
        [74, 74, 141, 201, 259, 318, 377, 438, 501, 565, 631, 699, 768],
        [99, 99, 187, 263, 337, 411, 485, 561, 638, 716, 797, 880, 964],
        [23, 23, 41, 56, 69, 82, 94, 106, 118, 130, 141, 153, 165],
      ]
    ],
  ],

  thermalMaterialLoss: [
    [// not flat
      [// horizontal
        // outdoor
        [26, 26],
        // indoor
        [7, 10],
      ],
      [// vertical
        // outdoor
        [35, 35],
        // indoor
        [8, 12],
      ]
    ],
    [// flat
      [// horizontal
        // outdoor
        [35, 35],
        // indoor
        [8, 12],
      ],
      [// vertical
        // outdoor
        [35, 35],
        // indoor
        [8, 12],
      ]
    ]
  ],

  additionalLoss: [
    [// indoor
      1.2,  // less 150 mm, movable support
      1.15, // greater or equal 150 mm, movable support
      1.05, // steel, suspension support
      1.7,  // nonmetal
    ],
    [// outdoor
      1.15,
      1.15,
      1.15,
      1.15,
    ]
  ],

  xLnX: [
    0.0000, 0.0050, 0.0100, 0.0151, 0.0202, 0.0253, 0.0304, 0.0356, 0.0408, 0.0460, 0.0512, 0.0565, 0.0618,
    0.0671, 0.0724, 0.0777, 0.0831, 0.0885, 0.0939, 0.0994, 0.1048, 0.1103, 0.1158, 0.1214, 0.1269,
    0.1325,
    0.1381,
    0.1437,
    0.1494,
    0.1550,
    0.1607,
    0.1664,
    0.1722,
    0.1779,
    0.1837,
    0.1895,
    0.1953,
    0.2011,
    0.2070,
    0.2129,
    0.2188,
    0.2247,
    0.2307,
    0.2366,
    0.2426,
    0.2486,
    0.2546,
    0.2607,
    0.2667,
    0.2728,
    0.2789,
    0.2851,
    0.2912,
    0.2974,
    0.3036,
    0.3098,
    0.3160,
    0.3222,
    0.3285,
    0.3348,
    0.3411,
    0.3474,
    0.3537,
    0.3601,
    0.3665,
    0.3729,
    0.3793,
    0.3857,
    0.3922,
    0.3986,
    0.4051,
    0.4117,
    0.4182,
    0.4247,
    0.4313,
    0.4379,
    0.4445,
    0.4511,
    0.4577,
    0.4644,
    0.4711,
    0.4778,
    0.4845,
    0.4912,
    0.4979,
    0.5047,
    0.5115,
    0.5183,
    0.5251,
    0.5319,
    0.5388,
    0.5456,
    0.5525,
    0.5594,
    0.5663,
    0.5733,
    0.5802,
    0.5872,
    0.5942,
    0.6012,
    0.6082,
    0.6152,
    0.6223,
    0.6294,
    0.6364,
    0.6435,
    0.6507,
    0.6578,
    0.6649,
    0.6721,
    0.6793,
    0.6865,
    0.6937,
    0.7009,
    0.7082,
    0.7155,
    0.7227,
    0.7300,
    0.7373,
    0.7447,
    0.7520,
    0.7594,
    0.7667,
    0.7741,
    0.7815,
    0.7890,
    0.7964,
    0.8038,
    0.8113,
    0.8188,
    0.8263,
    0.8338,
    0.8413,
    0.8489,
    0.8564,
    0.8640,
    0.8716,
    0.8792,
    0.8868,
    0.8944,
    0.9021,
    0.9097,
    0.9174,
    0.9251,
    0.9328,
    0.9405,
    0.9483,
    0.9560,
    0.9638,
    0.9715,
    0.9793,
    0.9871,
    0.9950,
    1.0028,
    1.0106,
    1.0185,
    1.0264,
    1.0343,
    1.0422,
    1.0501,
    1.0580,
    1.0660,
    1.0739,
    1.0819,
    1.0899,
    1.0979,
    1.1059,
    1.1139,
    1.1220,
    1.1300,
    1.1381,
    1.1462,
    1.1543,
    1.1624,
    1.1705,
    1.1786,
    1.1868,
    1.1950,
    1.2031,
    1.2113,
    1.2195,
    1.2277,
    1.2360,
    1.2442,
    1.2525,
    1.2607,
    1.2690,
    1.2773,
    1.2856,
    1.2939,
    1.3023,
    1.3106,
    1.3190,
    1.3273,
    1.3357,
    1.3441,
    1.3525,
    1.3610,
    1.3694,
    1.3778,
    1.3863,
    1.3948,
    1.4033,
    1.4117,
    1.4203,
    1.4288,
    1.4373,
    1.4459,
    1.4544,
    1.4630,
    1.4716,
    1.4802,
    1.4888,
    1.4974,
    1.5060,
    1.5147,
    1.5233,
    1.5320,
    1.5407,
    1.5494,
    1.5581,
    1.5668,
    1.5755,
    1.5843,
    1.5930,
    1.6018,
    1.6105,
    1.6193,
    1.6281,
    1.6369,
    1.6458,
    1.6546,
    1.6634,
    1.6723,
    1.6812,
    1.6900,
    1.6989,
    1.7078,
    1.7167,
    1.7257,
    1.7346,
    1.7436,
    1.7525,
    1.7615,
    1.7705,
    1.7795,
    1.7885,
    1.7975,
    1.8065,
    1.8155,
    1.8246,
    1.8337,
    1.8427,
    1.8518,
    1.8609,
    1.8700,
    1.8791,
    1.8882,
    1.8974,
    1.9065,
    1.9157,
    1.9249,
    1.9340,
    1.9432,
    1.9524,
    1.9616,
    1.9709,
    1.9801,
    1.9894,
    1.9986,
    2.0079,
    2.0172,
    2.0264,
    2.0357,
    2.0450,
    2.0544,
    2.0637,
    2.0730,
    2.0824,
    2.0918,
    2.1011,
    2.1105,
    2.1199,
    2.1293,
    2.1387,
    2.1481,
    2.1576,
    2.1670,
    2.1765,
    2.1859,
    2.1954,
    2.2049,
    2.2144,
    2.2239,
    2.2334,
    2.2429,
    2.2525,
    2.2620,
    2.2716,
    2.2812,
    2.2907,
    2.3003,
    2.3099,
    2.3195,
    2.3291,
    2.3388,
    2.3484,
    2.3580,
    2.3677,
    2.3774,
    2.3870,
    2.3967,
    2.4064,
    2.4161,
    2.4258,
    2.4356,
    2.4453,
    2.4550,
    2.4648,
    2.4746,
    2.4843,
    2.4941,
    2.5039,
    2.5137,
    2.5235,
    2.5333,
    2.5432,
    2.5530,
    2.5629,
    2.5727,
    2.5826,
    2.5925,
    2.6023,
    2.6122,
    2.6221,
    2.6321,
    2.6420,
    2.6519,
    2.6619,
    2.6718,
    2.6818,
    2.6918,
    2.7017,
    2.7117,
    2.7217,
    2.7317,
    2.7417,
    2.7518,
    2.7618,
    2.7718,
    2.7819,
    2.7920,
    2.8020,
    2.8121,
    2.8222,
    2.8323,
    2.8424,
    2.8525,
    2.8627,
    2.8728,
    2.8829,
    2.8931,
    2.9032,
    2.9134,
    2.9236,
    2.9338,
    2.9440,
    2.9542,
    2.9644,
    2.9746,
    2.9849,
    2.9951,
    3.0053,
    3.0156,
    3.0259,
    3.0362,
    3.0464,
    3.0567,
    3.0670,
    3.0773,
    3.0877,
    3.0980,
    3.1083,
    3.1187,
    3.1290,
    3.1394,
    3.1498,
    3.1601,
    3.1705,
    3.1809,
    3.1913,
    3.2017,
    3.2122,
    3.2226,
    3.2330,
    3.2435,
    3.2539,
    3.2644,
    3.2749,
    3.2853,
    3.2958,
    3.3063,
    3.3168,
    3.3274,
    3.3379,
    3.3484,
    3.3589,
    3.3695,
    3.3800,
    3.3906,
    3.4012,
    3.4118,
    3.4223,
    3.4329,
    3.4436,
    3.4542,
    3.4648,
    3.4754,
    3.4860,
    3.4967,
    3.5073,
    3.5180,
    3.5287,
    3.5394,
    3.5500,
    3.5607,
    3.5714,
    3.5821,
    3.5929,
    3.6036,
    3.6143,
    3.6251,
    3.6358,
    3.6466,
    3.6573,
    3.6681,
    3.6789,
    3.6897,
    3.7005,
    3.7113,
    3.7221,
    3.7329,
    3.7437,
    3.7546,
    3.7654,
    3.7763,
    3.7871,
    3.7980,
    3.8089,
    3.8197,
    3.8306,
    3.8415,
    3.8524,
    3.8633,
    3.8743,
    3.8852,
    3.8961,
    3.9071,
    3.9180,
    3.9290,
    3.9399,
    3.9509,
    3.9619,
    3.9729,
    3.9839,
    3.9949,
    4.0059,
    4.0169,
    4.0279,
    4.0390,
    4.0500,
    4.0611,
    4.0721,
    4.0832,
    4.0943,
    4.1053,
    4.1164,
    4.1275,
    4.1386,
    4.1497,
    4.1608,
    4.1720,
    4.1831,
    4.1942,
    4.2054,
    4.2165,
    4.2277,
    4.2388,
    4.2500,
    4.2612,
    4.2724,
    4.2836,
    4.2948,
    4.3060,
    4.3172,
    4.3284,
    4.3397,
    4.3509,
    4.3622,
    4.3734,
    4.3847,
    4.3959,
    4.4072,
    4.4185,
    4.4298,
    4.4411,
    4.4524,
    4.4637,
    4.4750,
    4.4863,
    4.4977,
    4.5090,
    4.5203,
    4.5317,
    4.5431,
    4.5544,
    4.5658,
    4.5772,
    4.5886,
    4.6000,
    4.6114,
    4.6228,
    4.6342,
    4.6456,
    4.6570,
    4.6685,
    4.6799,
    4.6914,
    4.7028,
    4.7143,
    4.7258,
    4.7372,
    4.7487,
    4.7602,
    4.7717,
    4.7832,
    4.7947,
    4.8062,
    4.8178,
    4.8293,
    4.8408,
    4.8524,
    4.8639,
    4.8755,
    4.8871,
    4.8986,
    4.9102,
    4.9218,
    4.9334,
    4.9450,
    4.9566,
    4.9682,
    4.9798,
    4.9914,
    5.0031,
    5.0147,
    5.0264,
    5.0380,
    5.0497,
    5.0613,
    5.0730,
    5.0847,
    5.0964,
    5.1081,
    5.1198,
    5.1315,
    5.1432,
    5.1549,
    5.1666,
    5.1783,
    5.1901,
    5.2018,
    5.2136,
    5.2253,
    5.2371,
    5.2489,
    5.2606,
    5.2724,
    5.2842,
    5.2960,
    5.3078,
    5.3196,
    5.3314,
    5.3433,
    5.3551,
    5.3669,
    5.3788,
    5.3906,
    5.4025,
    5.4143,
    5.4262,
    5.4380,
    5.4499,
    5.4618,
    5.4737,
    5.4856,
    5.4975,
    5.5094,
    5.5213,
    5.5332,
    5.5452,
    5.5571,
    5.5691,
    5.5810,
    5.5930,
    5.6049,
    5.6169,
    5.6289,
    5.6408,
    5.6528,
    5.6648,
    5.6768,
    5.6888,
    5.7008,
    5.7128,
    5.7248,
    5.7369,
    5.7489,
    5.7609,
    5.7730,
    5.7850,
    5.7971,
    5.8092,
    5.8212,
    5.8333,
    5.8454,
    5.8575,
    5.8696,
    5.8817,
    5.8938,
    5.9059,
    5.9180,
    5.9301,
    5.9423,
    5.9544,
    5.9666,
    5.9787,
    5.9909,
    6.0030,
    6.0152,
    6.0274,
    6.0395,
    6.0517,
    6.0639,
    6.0761,
    6.0883,
    6.1005,
    6.1127,
    6.1249,
    6.1372,
    6.1494,
    6.1616,
    6.1739,
    6.1861,
    6.1984,
    6.2107,
    6.2229,
    6.2352,
    6.2475,
    6.2598,
    6.2720,
    6.2843,
    6.2966,
    6.3089,
    6.3213,
    6.3336,
    6.3459,
    6.3582,
    6.3706,
    6.3829,
    6.3953,
    6.4076,
    6.4200,
    6.4323,
    6.4447,
    6.4571,
    6.4695,
    6.4819,
    6.4943,
    6.5067,
    6.5191,
    6.5315,
    6.5439,
    6.5563,
    6.5687,
    6.5812,
    6.5936,
    6.6061,
    6.6185,
    6.6310,
    6.6434,
    6.6559,
    6.6684,
    6.6808,
    6.6933,
    6.7058,
    6.7183,
    6.7308,
    6.7433,
    6.7558,
    6.7683,
    6.7809,
    6.7934,
    6.8059,
    6.8185,
    6.8310,
    6.8436,
    6.8561,
    6.8687,
    6.8813,
    6.8938,
    6.9064,
    6.9190,
    6.9316,
    6.9442,
    6.9568,
    6.9694,
    6.9820,
    6.9946,
    7.0072,
    7.0199,
    7.0325,
    7.0451,
    7.0578,
    7.0704,
    7.0831,
    7.0957,
    7.1084,
    7.1211,
    7.1338,
    7.1464,
    7.1591,
    7.1718,
    7.1845,
    7.1972,
    7.2099,
    7.2226,
    7.2354,
    7.2481,
    7.2608,
    7.2735,
    7.2863,
    7.2990,
    7.3118,
    7.3245,
    7.3373,
    7.3501,
    7.3628,
    7.3756,
    7.3884,
    7.4012,
    7.4140,
    7.4268,
    7.4396,
    7.4524,
    7.4652,
    7.4780,
    7.4909,
    7.5037,
    7.5165,
    7.5294,
    7.5422,
    7.5551,
    7.5679,
    7.5808,
    7.5936,
    7.6065,
    7.6194,
    7.6323,
    7.6452,
    7.6580,
    7.6709,
    7.6838,
    7.6968,
    7.7097,
    7.7226,
    7.7355,
    7.7484,
    7.7614,
    7.7743,
    7.7873,
    7.8002,
    7.8132,
    7.8261,
    7.8391,
    7.8520,
    7.8650,
    7.8780,
    7.8910,
    7.9040,
    7.9170,
    7.9300,
    7.9430,
    7.9560,
    7.9690,
    7.9820,
    7.9950,
    8.0081,
    8.0211,
    8.0341,
    8.0472,
    8.0602,
    8.0733,
    8.0864,
    8.0994,
    8.1125,
    8.1256,
    8.1386,
    8.1517,
    8.1648,
    8.1779,
    8.1910,
    8.2041,
    8.2172,
    8.2303,
    8.2435,
    8.2566,
    8.2697,
    8.2828,
    8.2960,
    8.3091,
    8.3223,
    8.3354,
    8.3486,
    8.3618,
    8.3749,
    8.3881,
    8.4013,
    8.4145,
    8.4276,
    8.4408,
    8.4540,
    8.4672,
    8.4804,
    8.4937,
    8.5069,
    8.5201,
    8.5333,
    8.5465,
    8.5598,
    8.5730,
    8.5863,
    8.5995,
    8.6128,
    8.6260,
    8.6393,
    8.6526,
    8.6658,
    8.6791,
    8.6924,
    8.7057,
    8.7190,
    8.7323,
    8.7456,
    8.7589,
    8.7722,
    8.7855,
    8.7989,
    8.8122,
    8.8255,
    8.8388,
    8.8522,
    8.8655,
    8.8789,
    8.8922,
    8.9056,
    8.9190,
    8.9323,
    8.9457,
    8.9591,
    8.9725,
    8.9859,
    8.9992,
    9.0126,
    9.0260,
    9.0395,
    9.0529,
    9.0663,
    9.0797,
    9.0931,
    9.1066,
    9.1200,
    9.1334,
    9.1469,
    9.1603,
    9.1738,
    9.1872,
    9.2007,
    9.2142,
    9.2276,
    9.2411,
    9.2546,
    9.2681,
    9.2816,
    9.2951,
    9.3086,
    9.3221,
    9.3356,
    9.3491,
    9.3626,
    9.3761,
    9.3896,
    9.4032,
    9.4167,
    9.4302,
    9.4438,
    9.4573,
    9.4709,
    9.4844,
    9.4980,
    9.5116,
    9.5251,
    9.5387,
    9.5523,
    9.5659,
    9.5795,
    9.5931,
    9.6067,
    9.6203,
    9.6339,
    9.6475,
    9.6611,
    9.6747,
    9.6884,
    9.7020,
    9.7156,
    9.7293,
    9.7429,
    9.7565,
    9.7702,
    9.7839,
    9.7975,
    9.8112,
    9.8248,
    9.8385,
    9.8522,
    9.8659,
    9.8796,
    9.8933,
    9.9070,
    9.9207,
    9.9344,
    9.9481,
    9.9618,
    9.9755,
    9.9892,
    10.0029,
    10.0167,
    10.0304,
    10.0442,
    10.0579,
    10.0716,
    10.0854,
    10.0992,
    10.1129,
    10.1267,
    10.1405,
    10.1542,
    10.1680,
    10.1818,
    10.1956,
    10.2094,
    10.2232,
    10.2370,
    10.2508,
    10.2646,
    10.2784,
    10.2922,
    10.3060,
    10.3199,
    10.3337,
    10.3475,
    10.3614,
    10.3752,
    10.3890,
    10.4029,
    10.4168,
    10.4306,
    10.4445,
    10.4583,
    10.4722,
    10.4861,
    10.5000,
    10.5139,
    10.5278,
    10.5416,
    10.5555,
    10.5694,
    10.5834,
    10.5973,
    10.6112,
    10.6251,
    10.6390,
    10.6529,
    10.6669,
    10.6808,
    10.6948,
    10.7087,
    10.7226,
    10.7366,
    10.7506,
    10.7645,
    10.7785,
    10.7925,
    10.8064,
    10.8204,
    10.8344,
    10.8484,
    10.8624,
    10.8764,
    10.8904,
    10.9044,
    10.9184,
    10.9324,
    10.9464,
    10.9604,
    10.9744,
    10.9885,
    11.0025,
    11.0165,
    11.0306,
    11.0446,
    11.0587,
    11.0727,
    11.0868,
    11.1008,
    11.1149,
    11.1290,
    11.1430,
    11.1571,
    11.1712,
    11.1853,
    11.1994,
    11.2134,
    11.2275,
    11.2416,
    11.2557,
    11.2699,
    11.2840,
    11.2981,
    11.3122,
    11.3263,
    11.3405,
    11.3546,
    11.3687,
    11.3829,
    11.3970,
    11.4112,
    11.4253,
    11.4395,
    11.4536,
    11.4678,
    11.4820,
    11.4961,
    11.5103,
    11.5245,
    11.5387,
    11.5529,
    11.5671,
    11.5813,
    11.5955,
    11.6097,
    11.6239,
    11.6381,
    11.6523,
    11.6665,
    11.6808,
    11.6950,
    11.7092,
    11.7234,
    11.7377,
    11.7519,
    11.7662,
    11.7804,
    11.7947,
    11.8089,
    11.8232,
    11.8375,
    11.8518,
    11.8660,
    11.8803,
    11.8946,
    11.9089,
    11.9232,
    11.9375,
    11.9518,
    11.9661,
    11.9804,
    11.9947,
    12.0090,
    12.0233,
    12.0376,
    12.0520,
    12.0663,
    12.0806,
    12.0950,
    12.1093,
    12.1237,
    12.1380,
    12.1524,
    12.1667,
    12.1811,
    12.1954,
    12.2098,
    12.2242,
    12.2386,
    12.2529,
    12.2673,
    12.2817,
    12.2961,
    12.3105,
    12.3249,
    12.3393,
    12.3537,
    12.3681,
    12.3825,
    12.3969,
    12.4114,
    12.4258,
    12.4402,
    12.4547,
    12.4691,
    12.4835,
    12.4980,
    12.5124,
    12.5269,
    12.5413,
    12.5558,
    12.5703,
    12.5847,
    12.5992,
    12.6137,
    12.6282,
    12.6426,
    12.6571,
    12.6716,
    12.6861,
    12.7006,
    12.7151,
    12.7296,
    12.7441,
    12.7586,
    12.7731,
    12.7877,
    12.8022,
    12.8167,
    12.8313,
    12.8458,
    12.8603,
    12.8749,
    12.8894,
    12.9040,
    12.9185,
    12.9331,
    12.9476,
    12.9622,
    12.9768,
    12.9913,
    13.0059,
    13.0205,
    13.0351,
    13.0497,
    13.0643,
    13.0788,
    13.0934,
    13.1080,
    13.1226,
    13.1373,
    13.1519,
    13.1665,
    13.1811,
    13.1957,
    13.2104,
    13.2250,
    13.2396,
    13.2543,
    13.2689,
    13.2835,
    13.2982,
    13.3128,
    13.3275,
    13.3422,
    13.3568,
    13.3715,
    13.3862,
    13.4008,
    13.4155,
    13.4302,
    13.4449,
    13.4596,
    13.4743,
    13.4890,
    13.5036,
    13.5184,
    13.5331,
    13.5478,
    13.5625,
    13.5772,
    13.5919,
    13.6066,
    13.6214,
    13.6361,
    13.6508,
    13.6656,
    13.6803,
    13.6951,
    13.7098,
    13.7246,
    13.7393,
    13.7541,
    13.7688,
    13.7836,
    13.7984,
    13.8132,
    13.8279,
    13.8427,
    13.8575,
    13.8723,
    13.8871,
    13.9019,
    13.9167,
    13.9315,
    13.9463,
    13.9611,
    13.9759,
    13.9907,
    14.0055,
    14.0204,
    14.0352,
    14.0500,
    14.0649,
    14.0797,
    14.0945,
    14.1094,
    14.1242,
    14.1391,
    14.1539,
    14.1688,
    14.1836,
    14.1985,
    14.2134,
    14.2283,
    14.2431,
    14.2580,
    14.2729,
    14.2878,
    14.3027,
    14.3176,
    14.3325,
    14.3474,
    14.3623,
    14.3772,
    14.3921,
    14.4070,
    14.4219,
    14.4368,
    14.4518,
    14.4667,
    14.4816,
    14.4965,
    14.5115,
    14.5264,
    14.5414,
    14.5563,
    14.5713,
    14.5862,
    14.6012,
    14.6161,
    14.6311,
    14.6461,
    14.6610,
    14.6760,
    14.6910,
    14.7060,
    14.7210,
    14.7360,
    14.7509,
    14.7659,
    14.7809,
    14.7959,
    14.8110,
    14.8260,
    14.8410,
    14.8560,
    14.8710,
    14.8860,
    14.9011,
    14.9161,
    14.9311,
    14.9462,
    14.9612,
    14.9762,
    14.9913,
    15.0063,
    15.0214,
    15.0364,
    15.0515,
    15.0666,
    15.0816,
    15.0967,
    15.1118,
    15.1268,
    15.1419,
    15.1570,
    15.1721,
    15.1872,
    15.2023,
    15.2174,
    15.2325,
    15.2476,
    15.2627,
    15.2778,
    15.2929,
    15.3080,
    15.3231,
    15.3383,
    15.3534,
    15.3685,
    15.3837,
    15.3988,
    15.4139,
    15.4291,
    15.4442,
    15.4594,
    15.4745,
    15.4897,
    15.5048,
    15.5200,
    15.5352,
    15.5503,
    15.5655,
    15.5807,
    15.5959,
    15.6110,
    15.6262,
    15.6414,
    15.6566,
    15.6718,
    15.6870,
    15.7022,
    15.7174,
    15.7326,
    15.7478,
    15.7630,
    15.7782,
    15.7935,
    15.8087,
    15.8239,
    15.8391,
    15.8544,
    15.8696,
    15.8849,
    15.9001,
    15.9153,
    15.9306,
    15.9459,
    15.9611,
    15.9764,
    15.9916,
    16.0069,
    16.0222,
    16.0374,
    16.0527,
    16.0680,
    16.0833,
    16.0986,
    16.1138,
    16.1291,
    16.1444,
    16.1597,
    16.1750,
    16.1903,
    16.2056,
    16.2210,
    16.2363,
    16.2516,
    16.2669,
    16.2822,
    16.2976,
    16.3129,
    16.3282,
    16.3436,
    16.3589,
    16.3742,
    16.3896,
    16.4049,
    16.4203,
    16.4356,
    16.4510,
    16.4664,
    16.4817,
    16.4971,
    16.5125,
    16.5278,
    16.5432,
    16.5586,
    16.5740,
    16.5894,
    16.6047,
    16.6201,
    16.6355,
    16.6509,
    16.6663,
    16.6817,
    16.6971,
    16.7126,
    16.7280,
    16.7434,
    16.7588,
    16.7742,
    16.7897,
    16.8051,
    16.8205,
    16.8360,
    16.8514,
    16.8668,
    16.8823,
    16.8977,
    16.9132,
    16.9286,
    16.9441,
    16.9596,
    16.9750,
    16.9905,
    17.0060,
    17.0214,
    17.0369,
    17.0524,
    17.0679,
    17.0834,
    17.0988,
    17.1143,
    17.1298,
    17.1453,
    17.1608,
    17.1763,
    17.1918,
    17.2074,
    17.2229,
    17.2384,
    17.2539,
    17.2694,
    17.2849,
    17.3005,
    17.3160,
    17.3315,
    17.3471,
    17.3626,
    17.3782,
    17.3937,
    17.4093,
    17.4248,
    17.4404,
    17.4559,
    17.4715,
    17.4871,
    17.5026,
    17.5182,
    17.5338,
    17.5493,
    17.5649,
    17.5805,
    17.5961,
    17.6117,
    17.6273,
    17.6429,
    17.6585,
    17.6741,
    17.6897,
    17.7053,
    17.7209,
    17.7365,
    17.7521,
    17.7677,
    17.7834,
    17.7990,
    17.8146,
    17.8302,
    17.8459,
    17.8615,
    17.8771,
    17.8928,
    17.9084,
    17.9241,
    17.9397,
    17.9554,
    17.9710,
    17.9867,
    18.0024,
    18.0180,
    18.0337,
    18.0494,
    18.0651,
    18.0807,
    18.0964,
    18.1121,
    18.1278,
    18.1435,
    18.1592,
    18.1749,
    18.1906,
    18.2063,
    18.2220,
    18.2377,
    18.2534,
    18.2691,
    18.2848,
    18.3005,
    18.3163,
    18.3320,
    18.3477,
    18.3634,
    18.3792,
    18.3949,
    18.4107,
    18.4264,
    18.4421,
    18.4579,
    18.4736,
    18.4894,
    18.5052,
    18.5209,
    18.5367,
    18.5524,
    18.5682,
    18.5840,
    18.5998,
    18.6155,
    18.6313,
    18.6471,
    18.6629,
    18.6787,
    18.6945,
    18.7103,
    18.7261,
    18.7419,
    18.7577,
    18.7735,
    18.7893,
    18.8051,
    18.8209,
    18.8367,
    18.8525,
    18.8684,
    18.8842,
    18.9000,
    18.9159,
    18.9317,
    18.9475,
    18.9634,
    18.9792,
    18.9951,
    19.0109,
    19.0268,
    19.0426,
    19.0585,
    19.0743,
    19.0902,
    19.1061,
    19.1219,
    19.1378,
    19.1537,
    19.1696,
    19.1854,
    19.2013,
    19.2172,
    19.2331,
    19.2490,
    19.2649,
    19.2808,
    19.2967,
    19.3126,
    19.3285,
    19.3444,
    19.3603,
    19.3762,
    19.3922,
    19.4081,
    19.4240,
    19.4399,
    19.4559,
    19.4718,
    19.4877,
    19.5037,
    19.5196,
    19.5355,
    19.5515,
    19.5674,
    19.5834,
    19.5993,
    19.6153,
    19.6313,
    19.6472,
    19.6632,
    19.6792,
    19.6951,
    19.7111,
    19.7271,
    19.7431,
    19.7590,
    19.7750,
    19.7910,
    19.8070,
    19.8230,
    19.8390,
    19.8550,
    19.8710,
    19.8870,
    19.9030,
    19.9190,
    19.9350,
    19.9510,
    19.9671,
    19.9831,
    19.9991,
    20.0151,
    20.0312,
    20.0472,
    20.0632,
    20.0793,
    20.0953,
    20.1113,
    20.1274,
    20.1434,
    20.1595,
    20.1755,
    20.1916,
    20.2077,
    20.2237,
    20.2398,
    20.2558,
    20.2719,
    20.2880,
    20.3041,
    20.3201,
    20.3362,
    20.3523,
    20.3684,
    20.3845,
    20.4006,
    20.4167,
    20.4328,
    20.4489,
    20.4650,
    20.4811,
    20.4972,
    20.5133,
    20.5294,
    20.5455,
    20.5616,
    20.5778,
    20.5939,
    20.6100,
    20.6261,
    20.6423,
    20.6584,
    20.6746,
    20.6907,
    20.7068,
    20.7230,
    20.7391,
    20.7553,
    20.7714,
    20.7876,
    20.8038,
    20.8199,
    20.8361,
    20.8523,
    20.8684,
    20.8846,
    20.9008,
    20.9169,
    20.9331,
    20.9493,
    20.9655,
    20.9817,
    20.9979,
    21.0141,
    21.0303,
    21.0465,
    21.0627,
    21.0789,
    21.0951,
    21.1113,
    21.1275,
    21.1437,
    21.1599,
    21.1762,
    21.1924,
    21.2086,
    21.2248,
    21.2411,
    21.2573,
    21.2735,
    21.2898,
    21.3060,
    21.3223,
    21.3385,
    21.3548,
    21.3710,
    21.3873,
    21.4035,
    21.4198,
    21.4361,
    21.4523,
    21.4686,
    21.4849,
    21.5011,
    21.5174,
    21.5337,
    21.5500,
    21.5663,
    21.5825,
    21.5988,
    21.6151,
    21.6314,
    21.6477,
    21.6640,
    21.6803,
    21.6966,
    21.7129,
    21.7292,
    21.7455,
    21.7619,
    21.7782,
    21.7945,
    21.8108,
    21.8272,
    21.8435,
    21.8598,
    21.8761,
    21.8925,
    21.9088,
    21.9252,
    21.9415,
    21.9579,
    21.9742,
    21.9906,
    22.0069,
    22.0233,
    22.0396,
    22.0560,
    22.0723,
    22.0887,
    22.1051,
    22.1215,
    22.1378,
    22.1542,
    22.1706,
    22.1870,
    22.2034,
    22.2197,
    22.2361,
    22.2525,
    22.2689,
    22.2853,
    22.3017,
    22.3181,
    22.3345,
    22.3509,
    22.3673,
    22.3838,
    22.4002,
    22.4166,
    22.4330,
    22.4494,
    22.4659,
    22.4823,
    22.4987,
    22.5152,
    22.5316,
    22.5480,
    22.5645,
    22.5809,
    22.5974,
    22.6138,
    22.6303,
    22.6467,
    22.6632,
    22.6796,
    22.6961,
    22.7126,
    22.7290,
    22.7455,
    22.7620,
    22.7784,
    22.7949,
    22.8114,
    22.8279,
    22.8444,
    22.8608,
    22.8773,
    22.8938,
    22.9103,
    22.9268,
    22.9433,
    22.9598,
    22.9763,
    22.9928,
    23.0093,
    23.0259

  ],
  /**
   * Returns indoor constants array dimension
   *
   * @param {boolean|number} isIndoor
   *
   * @returns {number}
   */
  getIndoorDim: function (isIndoor) {
    return typeof isIndoor !== 'boolean' && isIndoor !== 0 && isIndoor !== 1
      ? 2
      : isIndoor
        ? 1
        : 0;
  },

  getLowerBound: function (value, arr) {
    let i = 0;

    for (; i < arr.length; i++) {
      if (arr[i] >= value) {
        break;
      }
    }

    return Math.max(0, i - 1);
  },

  getHigherBound: function (value, arr) {
    let i = 0;

    for (; i < arr.length; i++) {
      if (arr[i] >= value) {
        break;
      }
    }

    return Math.min(arr.length - 1, i);
  },

  getRatio: function (value, low, high) {
    return high !== low ? (value - low) / (high - low) : 0;
  },

  getLinearInterpolation: function (ratio, low, high) {
    return low + ratio * (high - low);
  },

  /**
   * Returns conductivity coefficient for specific material
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   *
   * @return {number}
   */
  getThermalConductivityCoefficient: function (material, conductivity) {
    return Number.isFinite(this.settings.material_conductivity)
      ? this.settings.material_conductivity
      : conductivity ? conductivity[material][0] : this.conductivity[material][0];
  },


  /**
   * Returns delta for conductivity coefficient for specific material
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   *
   * @return {number}
   */
  getThermalConductivityDelta: function (material) {
    return Number.isFinite(this.settings.material_conductivity_delta)
      ? this.settings.material_conductivity_delta
      : this.conductivity[material][1];
  },

  /**
   * Returns conductivity coefficient for specific material with thermal correction
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   * @param {number} temperatureIn - internal pipe temperature
   * @param {number} temperatureOut - air temperature
   *
   * @return {number}
   */
  getThermalConductivityByMaterial: function (material, temperatureIn, temperatureOut) {
    return this.getThermalConductivityCoefficient(material) + this.getThermalConductivityDelta(material) * (temperatureIn + temperatureOut) / 2.0;
  },

  /**
   * Returns additional loss factor
   *
   * @param {number} region - equipment installation location (0 - Europe, 1 - Ural, 2 - West Siberia, 3 - East Siberia, 4 - Far East, 5 - Far North or similar)
   * @param {number} indoor - piping method (0 - outdoor, 1 - indoor/tunnel, 2 - impassable channel, 3 - channelless)
   *
   * @return {number}
   */
  getRegionKoef: function (region, indoor) {
    return Number.isFinite(this.settings.region_coefficient)
      ? this.settings.region_coefficient
      : this.lossFactor[region][indoor];
  },

  /**
   * Returns type of method for calculation isolation depth by heat flow density
   *
   * @param {boolean} isFlat - is flat surface
   * @param {number} diameter - pipe diameter (in mm)
   *
   * @return {boolean}
   */
  isSurfaced: function (isFlat, diameter) {
    return isFlat || diameter >= 2000;
  },

  /**
   * Returns thermal resistance to heat transfer coefficient
   *
   * @param {boolean} isFlat - is flat surface
   * @param {boolean} isVertical - is pipes have vertical position
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {boolean}
   */
  getThermalLossCoefficient: function (isFlat, isVertical, isIndoor, emission) {
    const
      flatDim = isFlat ? 1 : 0,
      verticalDim = isVertical ? 1 : 0,
      indoorDim = this.getIndoorDim(isIndoor);

    return Number.isFinite(this.settings.heat_coefficient)
      ? this.settings.heat_coefficient
      : this.thermalMaterialLoss[flatDim][verticalDim][indoorDim][emission];
  },

  /**
   * Returns linear coefficient of thermal resistance to external heat transfer
   *
   * @param {boolean} isFlat - is flat surface
   * @param {boolean} isVertical - is pipes have vertical position
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {number}
   */
  getThermalResistanceByMaterial: function (isFlat, isVertical, isIndoor, emission) {
    return 1.0 / this.getThermalLossCoefficient(isFlat, isVertical, isIndoor, emission);
  },

  /**
   * Returns linear coefficient of thermal resistance to external heat transfer
   *
   * @param {number} diameter - pipe diameter (in mm)
   * @param {number} temperatureIn - inner temperature
   * @param {number|boolean} isIndoor - is pipes are indoor
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {number}
   */
  getThermalResistance: function (diameter, temperatureIn, isIndoor, emission) {
    const
      indoorDim = this.getIndoorDim(isIndoor),
      tl = this.getLowerBound(temperatureIn, this.resistanceT),
      th = this.getHigherBound(temperatureIn, this.resistanceT),
      dl = this.getLowerBound(diameter, this.resistanceD),
      dh = this.getHigherBound(diameter, this.resistanceD),
      tRatio = this.getRatio(temperatureIn, this.resistanceT[tl], this.resistanceT[th]),
      dRatio = this.getRatio(diameter, this.resistanceD[dl], this.resistanceD[dh]),
      dInterpolationLow = this.getLinearInterpolation(dRatio, this.thermalResistance[indoorDim][emission][dl][tl], this.thermalResistance[indoorDim][emission][dh][tl]),
      dInterpolationHigh = this.getLinearInterpolation(dRatio, this.thermalResistance[indoorDim][emission][dl][th], this.thermalResistance[indoorDim][emission][dh][th]);

    return this.getLinearInterpolation(tRatio, dInterpolationLow, dInterpolationHigh);
  },

  /**
   * Returns additional thermal loss factor through pillars
   *
   * @param {boolean} isTunnel - is pipes are in tunnel
   * @param {number} diameter - pipe diameter (in mm)
   * @param {boolean} isSteel - is pipe steel
   * @param {boolean} isMovable - is pipe on movable (not suspension) support
   *
   * @return {number}
   */
  getAdditionalLossFactor: function (diameter, isTunnel = false, isSteel = true, isMovable = true) {
    if (Number.isFinite(this.settings.additional_loss)) {
      return this.settings.additional_loss;
    }

    return isTunnel
      ? this.additionalLoss[1][0]
      : !isSteel
        ? this.additionalLoss[0][3]
        : !isMovable
          ? this.additionalLoss[0][2]
          : diameter < 150
            ? this.additionalLoss[0][0]
            : this.additionalLoss[0][1];
  },

  /**
   * Returns depth of insulation from standardized flat surface heat flow density
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   * @param {number} diameter - pipe diameter (in mm)
   * @param {number} temperatureIn - inner temperature
   * @param {number} temperatureOut - air temperature
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {boolean} isFlat - is flat surface
   * @param {boolean} isVertical - is pipes have vertical position
   * @param {number} region - equipment installation location (0 - Europe, 1 - Ural, 2 - West Siberia, 3 - East Siberia, 4 - Far East, 5 - Far North or similar)
   * @param {number} hours - number of working hours
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {number} in mm
   */
  getFlatHeatFlowDepth: function (material, diameter, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission) {
    const
      loss = this.getAdditionalLossFactor(diameter),
      thermalConductivity = this.getThermalConductivityByMaterial(material, temperatureIn, temperatureOut),
      thermalResistance = !this.isSurfaced(isFlat, diameter)
        ? this.getThermalResistance(diameter, temperatureIn, isIndoor, emission)
        : this.getThermalResistanceByMaterial(isFlat, isVertical, isIndoor, emission);

    let density = this.getSurfaceHeatFlowDensity(diameter, temperatureIn, isIndoor, hours, isFlat, region);

    if (Number.isFinite(this.settings.density)) {
      density = this.settings.density;
    }

    return Math.max(0, thermalConductivity * (loss * (temperatureIn - temperatureOut) / density - thermalResistance)) * 1000;
  },

  /**
   * Returns surface heat flow by isolation depth
   *
   * @param {number} depth - insulation depth
   * @param {number} tCond - thermal conductivity
   * @param {number} tRes - thermal resistance of isolation
   * @param {number} diameter - pipe diameter (in metres)
   * @param {number} temperatureIn - inner temperature
   * @param {number} temperatureOut - air temperature
   *
   * @return {number}
   */
  getSurfaceHeatFlow: function (depth, tCond, tRes, diameter, temperatureIn, temperatureOut) {
    return Math.PI * (temperatureIn - temperatureOut) / (1.0 / (tRes * (diameter + 2 * depth)) + 1.0 / (2 * tCond) * Math.log((diameter + 2 * depth) / diameter));
  },

  /**
   * Returns depth of insulation from standardized curvilinear surface heat flow density using sequential approximation
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   * @param {number} diameter - pipe diameter (in mm)
   * @param {number} temperatureIn - inner temperature
   * @param {number} temperatureOut - air temperature
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {boolean} isFlat - is flat surface
   * @param {boolean} isVertical - is pipes have vertical position
   * @param {number} region - equipment installation location (0 - Europe, 1 - Ural, 2 - West Siberia, 3 - East Siberia, 4 - Far East, 5 - Far North or similar)
   * @param {number} hours - number of working hours
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {number}
   */
  getCurvilinearHeatFlowDepthByApproximation: function (material, diameter, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission) {
    const
      eps = 1e-4,
      density = this.getSurfaceHeatFlowDensity(diameter, temperatureIn, isIndoor, hours, isFlat, region),
      tCond = this.getThermalConductivityByMaterial(material, temperatureIn, temperatureOut),
      tRes = 1.0 / this.getThermalResistanceByMaterial(isFlat, isVertical, isIndoor, emission),
      loss = this.getAdditionalLossFactor(diameter),
      d = diameter / 1000; // in metres

    let qi = 0;

    while (loss * this.getSurfaceHeatFlow(qi, tCond, tRes, d, temperatureIn, temperatureOut) - density > 0 && qi < 1) {
      qi += eps;
    }

    return qi * 1000;
  },

  /**
   * Returns integral exposure from pipe surface
   *
   * @param value
   *
   * @return {number}
   */
  getExposure: function (value) {
    return Math.pow(Math.E, 2 * Math.PI * value);
  },

  /**
   * Returns integral insulation depth
   *
   * @param diameter - inner pipe diameter
   * @param B - integral coefficient
   *
   * @return {number}
   */
  getInsulationDepth: function (diameter, B) {
    return diameter * (B - 1) / 2;
  },

  /**
   * Returns depth of insulation from standardized curvilinear surface heat flow density
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   * @param {number} diameterIn - inner pipe diameter
   * @param {number} diameterOut - outer pipe diameter
   * @param {number} temperatureIn - inner temperature
   * @param {number} temperatureOut - air temperature
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {boolean} isFlat - is flat surface
   * @param {boolean} isVertical - is pipes have vertical position
   * @param {number} region - equipment installation location (0 - Europe, 1 - Ural, 2 - West Siberia, 3 - East Siberia, 4 - Far East, 5 - Far North or similar)
   * @param {number} hours - number of working hours
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {number}
   */
  getCurvilinearHeatFlowDepth: function (material, diameterIn, diameterOut, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission) {
    const
      flatDepth = this.getFlatHeatFlowDepth(material, diameterIn, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission),
      B = this.getExposure(flatDepth / 1000.0);

    return this.getInsulationDepth(diameterOut, B);
  },

  /**
   * Returns normal surface heat flow density
   *
   * @param {number} diameter - pipe diameter
   * @param {number} temperatureIn - inner temperature
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {number} hours - number of working hours
   * @param {boolean} isFlat - is flat surface
   * @param {number} region - equipment installation location (0 - Europe, 1 - Ural, 2 - West Siberia, 3 - East Siberia, 4 - Far East, 5 - Far North or similar)
   *
   * @return {number}
   */
  getSurfaceHeatFlowDensity: function (diameter, temperatureIn, isIndoor, hours, isFlat, region) {
    const
      indoorDim = this.getIndoorDim(isIndoor),
      hoursDim = hours > 5000 ? 1 : 0,
      tl = this.getLowerBound(temperatureIn, this.densityT),
      th = this.getHigherBound(temperatureIn, this.densityT),
      dl = this.getLowerBound(diameter, this.densityD),
      dh = this.getHigherBound(diameter, this.densityD),
      tRatio = this.getRatio(temperatureIn, this.densityT[tl], this.densityT[th]),
      dRatio = this.getRatio(diameter, this.densityD[dl], this.densityD[dh]);

    // more 1400 or flat surface
    if (isFlat || diameter > 1400) {
      return this.getRegionKoef(region, indoorDim) * this.getLinearInterpolation(tRatio, this.densityRate[indoorDim][hoursDim][this.densityD.length - 1][tl], this.densityRate[indoorDim][hoursDim][this.densityD.length - 1][th]);
    }

    const
      dInterpolationLow = this.getLinearInterpolation(dRatio, this.densityRate[indoorDim][hoursDim][dl][tl], this.densityRate[indoorDim][hoursDim][dh][tl]),
      dInterpolationHigh = this.getLinearInterpolation(dRatio, this.densityRate[indoorDim][hoursDim][dl][th], this.densityRate[indoorDim][hoursDim][dh][th]);

    return this.getRegionKoef(region, indoorDim) * this.getLinearInterpolation(tRatio, dInterpolationLow, dInterpolationHigh);
  },

  /**
   * Returns depth of insulation from standardized surface heat flow density
   *
   * @param {number} material - insulation material (0 - EPDM, 1 - EPDM HT, 2 - FIRO)
   * @param {number} diameterIn - inner pipe diameter
   * @param {number} diameterOut - outer pipe diameter
   * @param {number} temperatureIn - inner temperature
   * @param {number} temperatureOut - air temperature
   * @param {boolean} isIndoor - is pipes are indoor
   * @param {boolean} isFlat - is flat surface
   * @param {boolean} isVertical - is pipes have vertical position
   * @param {number} region - equipment installation location (0 - Europe, 1 - Ural, 2 - West Siberia, 3 - East Siberia, 4 - Far East, 5 - Far North or similar)
   * @param {number} hours - number of working hours
   * @param {number} emission - coefficient of emission (0 - small emission, 1 - high emission)
   *
   * @return {number}
   */
  getSurfaceHeatFlowDepth: function (material, diameterIn, diameterOut, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission) {
    return this.isSurfaced(isFlat, diameterIn)
      ? this.getFlatHeatFlowDepth(material, diameterIn, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission)
      : this.getCurvilinearHeatFlowDepth(material, diameterIn, diameterOut, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, hours, emission);
  },

  /**
   * Returns thermal resistance of insulation from given thermal difference of transfer fluid
   *
   * @param {number} length
   * @param {number} diameterIn
   * @param {number} diameterOut
   * @param {boolean|number} isIndoor
   * @param {number} consumption
   * @param {number} capacity
   * @param {number} temperatureBefore
   * @param {number} temperatureAfter
   * @param {number} temperatureOut
   * @param {boolean} isSteel
   * @param {boolean} isMovable
   * @param {number} emission
   *
   * @returns {number}
   */
  getThermalInsulationResistance: function (length, diameterIn, diameterOut, isIndoor, consumption, capacity, temperatureBefore, temperatureAfter, temperatureOut, isSteel, isMovable, emission) {
    const
      variant = (temperatureBefore - temperatureOut) / (temperatureAfter - temperatureOut),
      lossFactor = this.getAdditionalLossFactor(diameterOut, false, isSteel, isMovable);

    let koefficient = (variant >= 2)
      ? 1.0 / Math.log(variant)
      : ((temperatureBefore + temperatureAfter) / 2.0 - temperatureOut) / (temperatureBefore - temperatureAfter);

    return this.constants.DIFF * koefficient * lossFactor * length / consumption / capacity;
  },

  /**
   * Returns depth of insulation from given thermal difference of transfer fluid
   *
   * @param {number} length
   * @param {number} diameterIn
   * @param {number} diameterOut
   * @param {boolean|number} isIndoor
   * @param {number} consumption
   * @param {number} capacity
   * @param {number} temperatureBefore
   * @param {number} temperatureAfter
   * @param {number} temperatureOut
   * @param {number} isolation
   * @param {boolean} isSteel
   * @param {boolean} isMovable
   * @param {number} emission
   *
   * @returns {number}
   */
  getThermalDifferenceFlowDepth: function (length, diameterIn, diameterOut, isIndoor, consumption, capacity, temperatureBefore, temperatureAfter, temperatureOut, isolation, isSteel, isMovable, emission) {
    const
      indoorDim = this.getIndoorDim(isIndoor),
      indoorWithoutTunnel = indoorDim > 1 ? 1 : indoorDim,
      thermalInsulationResistance = this.getThermalInsulationResistance(length, diameterIn, diameterOut, isIndoor, consumption, capacity, temperatureBefore, temperatureAfter, temperatureOut, isSteel, isMovable, emission),
      thermalPipeResistance = this.getThermalResistance(diameterIn * 1000, temperatureBefore, indoorWithoutTunnel, emission),
      thermalConductivity = this.getThermalConductivityByMaterial(isolation, temperatureBefore, temperatureOut),
      B = this.getExposure(thermalConductivity * (thermalInsulationResistance - thermalPipeResistance));

    return this.getInsulationDepth(diameterOut, B);
  },

  getInsulationDepthWithoutPipesSettings: function (surfaceInsulationTemperature, isFlat, isVertical, isIndoor, emission, material, temperatureIn, temperatureOut) {
    const topArg = Number(this.getThermalConductivityByMaterial(material, temperatureIn, temperatureOut).toFixed(4)) * (temperatureIn - surfaceInsulationTemperature)
    const bottomArg = this.getThermalLossCoefficient(isFlat, isVertical, isIndoor, emission) * (surfaceInsulationTemperature - temperatureOut)
    
    return 1000 * (topArg / bottomArg)
  },


  getInsulationDepthWithPipesSettings: function (material, diameterIn, diameterOut, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, emission, surfaceInsulationTemperature) {
    const density = ((temperatureIn - surfaceInsulationTemperature) / (surfaceInsulationTemperature - temperatureOut) / 1000)
    let k = Number(density.toFixed(3));
   
    const thermalLossCoefficient = this.getThermalLossCoefficient(isFlat, isVertical, isIndoor, emission)

    while (true) {

      const LnDiameter = Math.log(((diameterOut / 1000) + 2 * k) / (diameterOut / 1000))
      const insulationDepth = (LnDiameter * thermalLossCoefficient * ((diameterOut / 1000) + 2 * k)) / (2 * Number(this.getThermalConductivityByMaterial(material, temperatureIn, temperatureOut).toFixed(4)))

      if ((insulationDepth / 1000) - density >= 0) {
        console.log('insulationDepth ', insulationDepth)
        return k * 1000
      }

      k += 0.001;
    }
  },

  getInsulationDepthWithSurfaceTemperature: function (material, diameterIn, diameterOut, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, emission, surfaceInsulationTemperature) {
    return isFlat
      ? this.getInsulationDepthWithoutPipesSettings(surfaceInsulationTemperature, isFlat, isVertical, isIndoor, emission, material, temperatureIn, temperatureOut)
      : this.getInsulationDepthWithPipesSettings(material, diameterIn, diameterOut, temperatureIn, temperatureOut, isIndoor, isFlat, isVertical, region, emission, surfaceInsulationTemperature)
  },

  // second calc
  getDiameterOutWithInsulation: function (insulationWidth, diameterOut) {
    return (2 * (insulationWidth * 1000) + diameterOut) / 1000
  },

  getV: function (diameterOut, pipeWidth) {
    const baseValue = (diameterOut - 2 * pipeWidth) / 2
    return 3.14 * Math.pow(baseValue, 2)
  },

  getVpCLiquid: function (diameterOut, pipeWidth, coolantDensity, coolantHeatCapacity) {
    return this.getV(diameterOut, pipeWidth) * coolantDensity * coolantHeatCapacity
  },

  getVForOneMeterLength: function (diameterOut, pipeWidth) {
    return 3.14 * Math.pow((diameterOut / 2), 2) - this.getV(diameterOut, pipeWidth)
  },

  getVpCPipeWall: function (diameterOut, pipeWidth, pipeMaterialDensity, materialHeatCapacity) {
    return this.getVForOneMeterLength(diameterOut, pipeWidth) * pipeMaterialDensity * materialHeatCapacity
  },

  getFirstNumerator: function (heatCoefficientAdditionsLosses, stopTime) {
    return 3.6 * heatCoefficientAdditionsLosses * stopTime
  },

  getDenominatorFirstFractionFirst: function (diameterOut, pipeWidth, coolantDensity, coolantHeatCapacity, pipeMaterialDensity, materialHeatCapacity, temperatureOut, startCarrierTemperature, startCoolantFrostTemperature) {
    const top = 2 * (startCarrierTemperature - startCoolantFrostTemperature) * (this.getVpCLiquid(diameterOut, pipeWidth, coolantDensity, coolantHeatCapacity) - this.getVpCPipeWall(diameterOut, pipeWidth, pipeMaterialDensity, materialHeatCapacity))
    const bottom = (startCarrierTemperature + startCoolantFrostTemperature - 2 * temperatureOut)

    return top / bottom
  },

  getDenominatorSecondFractionSecond: function (permissibleIceContent, diameterOut, pipeWidth, coolantDensity, startCoolantFrostTemperature, temperatureOut) {
    const top = (permissibleIceContent / 100) * this.getV(diameterOut, pipeWidth) * coolantDensity * (-335)
    const bottom = startCoolantFrostTemperature - temperatureOut

    return top / bottom
  },

  getFractionFirst: function (
    diameterOut,
    pipeWidth,
    coolantDensity,
    coolantHeatCapacity,
    pipeMaterialDensity,
    materialHeatCapacity,
    temperatureOut,
    startCarrierTemperature,
    startCoolantFrostTemperature,
    permissibleIceContent,
    heatCoefficientAdditionsLosses,
    stopTime
  ) {
    const a = this.getDenominatorFirstFractionFirst(diameterOut, pipeWidth, coolantDensity, coolantHeatCapacity, pipeMaterialDensity, materialHeatCapacity, temperatureOut, startCarrierTemperature, startCoolantFrostTemperature)
    const b = this.getDenominatorSecondFractionSecond(permissibleIceContent, diameterOut, pipeWidth, coolantDensity, startCoolantFrostTemperature, temperatureOut)

    return this.getFirstNumerator(heatCoefficientAdditionsLosses, stopTime) / (a - b)
  },

  getFractionSecond: function (heatCoefficient, insulationWidth, diameterOut) {
    return 1 / (3.14 * heatCoefficient * this.getDiameterOutWithInsulation(insulationWidth, diameterOut))
  },

  getInsulationDepthForLiquidFrost: function (
    material,
    diameterIn,
    diameterOut,
    temperatureOut, // темп окружающей среды
    isIndoor,
    isFlat,
    isVertical,
    region,
    emission,
    pipeWidth, // толщина стенки
    pipeMaterialDensity, // плотность материала стенки трубопровода
    materialHeatCapacity, // теплоемкость материала стенки трубопровода
    heatCoefficientAdditionsLosses, // Коэффициент дополнительных тепловых потерь (K)
    startCarrierTemperature, // температура подачи
    startCoolantFrostTemperature, // температура замерзания
    permissibleIceContent, // процент льда
    coolantDensity, // плотность теплоносителя (вода ...)
    coolantHeatCapacity, // Теплоемкость теплоносителя (вода ...)
    stopTime // время остановки
  ) {
    let k = 0.0001

    while (true) {

      const LnB = 2
        * 3.14
        * this.getThermalConductivityCoefficient(material, [[0.0339], [0.0324], [0.0307]])
        * (this.getFractionFirst((diameterOut / 1000), (pipeWidth / 1000), coolantDensity, coolantHeatCapacity, pipeMaterialDensity, materialHeatCapacity, temperatureOut, startCarrierTemperature, startCoolantFrostTemperature, permissibleIceContent, heatCoefficientAdditionsLosses, stopTime) - this.getFractionSecond(this.getThermalLossCoefficient(isFlat, isVertical, isIndoor, emission), k, diameterOut))

      const B = Math.pow(2.71828, LnB)

      const insulationDepth = (diameterOut / 1000) * (B - 1) / 2

      if (k > insulationDepth) {
        return insulationDepth * 1000
      }

      k += 0.00001
    }
  },


  // calc 3

  getDewPoint: function (humidityOut, temperatureOut) {

    const humidity = humidityOut / 100
    const humidityLn = Math.log(humidity)

    const low = 17.27 * temperatureOut
    const high = 237.7 + temperatureOut

    const top = 237.7 * (low / high + humidityLn)
    const bottom = 17.27 - (low / high + humidityLn)

    return (top / bottom).toFixed(2)
  },

  getXlnX: function (material, dewPointTemperature, emission, temperatureIn, temperatureOut, diameterOut, pipe) {

    const koeff = +(this.getThermalConductivityByMaterial(material, temperatureIn, temperatureOut).toFixed(4))
    const left = (2 * koeff) / (pipe * (diameterOut / 1000))
    const right = ((dewPointTemperature - temperatureIn) / (temperatureOut - dewPointTemperature))
    const xlnx = left * right

    return Number(xlnx.toFixed(3))
  },

  getXWithInterpolation: function(curXlnx, prevXlnx, xCur, xPrev, xlnX) {
    const x = (xlnX - prevXlnx) * (xCur - xPrev) / (curXlnx - prevXlnx)
    
    return x + xPrev
  },

  getInsulationWidthForCondensate: function (material, dewPointTemperature, emission, temperatureIn, temperatureOut, diameterOut, isFlat, humidityOut, pipe) {

    if (isFlat) {
      
      const b = +(this.getThermalConductivityByMaterial(material, temperatureIn, temperatureOut).toFixed(4))
      const lossKoef = pipe
      
      const a = (b / lossKoef ) * (((temperatureOut - temperatureIn) / (temperatureOut - dewPointTemperature)) - 1)

      return a * 1000
    } 
  
    const xlnX = this.getXlnX(material, dewPointTemperature, emission, temperatureIn, temperatureOut, diameterOut, pipe)
    
    const getX = () => {
      let topIndex;
      let bottomIndex;
      let startValue = 1.000;
      let step = 0.0050;
      let curXlnx;
      let prevXlnx;
  
      for (let i = 0; i <= this.xLnX.length - 1; i++) {
        curXlnx = this.xLnX[i];

        if (xlnX === 0) {
          topIndex = 0;
          break;
        }

        if (i === 0 && xlnX !== 0) {
          continue;
        }

        if (xlnX === curXlnx) {
          topIndex = i
          break;
        } 
  
        if (xlnX < curXlnx && xlnX < this.xLnX[i - 1]) {
          topIndex = i;
          bottomIndex = i - 1;
          prevXlnx = this.xLnX[i - 1];
          break;
        }

        if (i >= (this.xLnX.length - 1)) {
          topIndex = i;
          break;
        }
      }

      let X;

      if (bottomIndex === undefined) {
        X = startValue + topIndex * step;
        return Number(X.toFixed(4))
      }

      let xCur = startValue + topIndex * step;
      let xPrev = startValue + bottomIndex * step;

      console.log( {curXlnx, prevXlnx, xCur, xPrev, xlnX} )
      X = this.getXWithInterpolation(curXlnx, prevXlnx, xCur, xPrev, xlnX);

      return Number(X.toFixed(4))
    }
    
    const X = getX();

    console.log({ xlnX, X, diameterOut })
    const depth = ((diameterOut / 1000) * (X - 1)) / 2


    return Number((depth * 1000).toFixed(2))
  },

  // gas Calc

  getPipeDiameter: function (gasPipeWidth, gasPipeHeight) {

    const widthMeter = gasPipeWidth / 1000;
    const heightMeter = gasPipeHeight / 1000;

    return 2 * (widthMeter * heightMeter) / (widthMeter + heightMeter);
  },

  getGasDewPointTemperature: function (gasMovingTemperature, temperatureOut, gasMovingHumidity) {
    
    const top = 237.7 * (17.27 * gasMovingTemperature / (237.7 + temperatureOut + Math.log(gasMovingHumidity / 100))) 
    const bottom = (17.27 - ((17.27 * gasMovingTemperature) / (237.7 * gasMovingTemperature + Math.log(gasMovingHumidity / 100)))) 

    return (top / bottom).toFixed(4)
  }

};
